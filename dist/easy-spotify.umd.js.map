{"version":3,"sources":["webpack://EasySpotify/webpack/universalModuleDefinition","webpack://EasySpotify/webpack/bootstrap","webpack://EasySpotify/./index.js","webpack://EasySpotify/./src/config.js","webpack://EasySpotify/./src/index.js","webpack://EasySpotify/./src/utils.js"],"names":["module","exports","require","default","API_URL","EasySpotify","config","api","token","url","headers","Authorization","fetch","then","toJSON","id","request","ids","query","type","search","data","json"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;;;AClFAA,OAAOC,OAAP,GAAiBC,mBAAOA,CAAC,mCAAR,EAAuBC,OAAxC,C;;;;;;;;;;;;;;;;;ACAO,IAAMC,4BAAU,4BAAhB,C;;;;;;;;;;;;;;;;;;;;ACAP;;AACA;;;;AAEA;;;;;;IAMqBC,W;AACnB;;;;;AAKA,uBAAYC,MAAZ,EAAoB;AAAA;;AAClB,QAAG,CAACA,OAAOC,GAAX,EAAgB;AACdD,aAAOC,GAAP,GAAaH,eAAb;AACD;AACD,SAAKE,MAAL,GAAcA,MAAd;AACD;;AAED;;;;;;;;6BAISE,K,EAAO;AACd,WAAKF,MAAL,CAAYE,KAAZ,GAAoBA,KAApB;AACD;;AAED;;;;;;;;;4BAMQC,G,EAAK;AACX,UAAMC,UAAU;AACdA,iBAAS;AACPC,qCAAyB,KAAKL,MAAL,CAAYE;AAD9B;AADK,OAAhB;AAKA,aAAOI,MAAMH,GAAN,EAAWC,OAAX,EAAoBG,IAApB,CAAyBC,aAAzB,CAAP;AACD;;AAED;;;;;;;;;;6BAOSC,E,EAAI;AACX,aAAO,KAAKC,OAAL,CAAgB,KAAKV,MAAL,CAAYC,GAA5B,gBAA0CQ,EAA1C,CAAP;AACD;;AAED;;;;;;;;;;;;;8BAUUE,G,EAAK;AACb,aAAO,KAAKD,OAAL,CAAgB,KAAKV,MAAL,CAAYC,GAA5B,oBAA8CU,GAA9C,CAAP;AACD;;AAED;;;;;;;;;;mCAOeF,E,EAAI;AACjB,aAAO,KAAKC,OAAL,CAAgB,KAAKV,MAAL,CAAYC,GAA5B,gBAA0CQ,EAA1C,aAAP;AACD;;AAED;;;;;;;;;;;2BAQOG,K,EAAOC,I,EAAM;AAClB,aAAO,KAAKH,OAAL,CAAgBZ,eAAhB,kBAAoCc,KAApC,cAAkDC,IAAlD,CAAP;AACD;;AAED;;;;;;;;;;iCAOaD,K,EAAO;AAClB,aAAO,KAAKE,MAAL,CAAYF,KAAZ,EAAmB,OAAnB,CAAP;AACD;;AAED;;;;;;;;;;kCAOcA,K,EAAO;AACnB,aAAO,KAAKE,MAAL,CAAYF,KAAZ,EAAmB,QAAnB,CAAP;AACD;;AAED;;;;;;;;;;oCAOgBA,K,EAAO;AACrB,aAAO,KAAKE,MAAL,CAAYF,KAAZ,EAAmB,UAAnB,CAAP;AACD;;AAED;;;;;;;;;;iCAOaA,K,EAAO;AAClB,aAAO,KAAKE,MAAL,CAAYF,KAAZ,EAAmB,OAAnB,CAAP;AACD;;;;;;kBA9HkBb,W;;;;;;;;;;;;;;;;;;ACTd,IAAMS,0BAAS,SAATA,MAAS;AAAA,SAAQO,KAAKC,IAAL,EAAR;AAAA,CAAf,C","file":"easy-spotify.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EasySpotify\"] = factory();\n\telse\n\t\troot[\"EasySpotify\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","module.exports = require('./src/index').default","export const API_URL = 'https://api.spotify.com/v1'","import { API_URL } from './config'\nimport { toJSON } from './utils'\n\n/**\n * @typedef {Object} EasySpotifyConfig\n * @property {string} api - Api url, by default is https://api.spotify.com/v1\n * @property {string} token - OAuth token, required\n */\n\nexport default class EasySpotify {\n  /**\n   * Constructor takes a config object, which receives api and token.\n   * @param {EasySpotifyConfig} config\n   * @returns {EasySpotify} object\n   */\n  constructor(config) {\n    if(!config.api) {\n      config.api = API_URL\n    }\n    this.config = config\n  }\n\n  /**\n   * Set your own spotify token, or you can't authorize spotify requests\n   * @param {string} token spotify OAuth token to make the requests with\n   */\n  setToken(token) {\n    this.config.token = token\n  }\n\n  /**\n   * Request maker method, makes the request with the OAuth token passed in config and transforms the response to JSON\n   * You should not use this method unless you want a specific spotify route\n   * @method request\n   * @param {string} url Full url to the api, including the endpoint and params to make full request\n   */\n  request(url) {\n    const headers = {\n      headers: {\n        Authorization: `Bearer ${this.config.token}`\n      }\n    }\n    return fetch(url, headers).then(toJSON)\n  }\n\n  /**\n   * Get some album from spotify\n   * @example\n   * // Get TRON: Legacy Reconfigured album\n   * easySpotifyInstance.getAlbum('382ObEPsp2rxGrnsizN5TX').then(data => console.log(data))\n   * @param {string} id The id of the album to get data from, ex: 382ObEPsp2rxGrnsizN5TX\n   */\n  getAlbum(id) {\n    return this.request(`${this.config.api}/albums/${id}`)\n  }\n\n  /**\n   * Get multiple albums from spotify\n   * You can pass in an array or only one string to this method\n   * @example\n   * // Get multiple albums\n   * easySpotifyInstance.getAlbums(['382ObEPsp2rxGrnsizN5TX', '1A2GTWGtFfWp7KSQTwWOyo', '2noRn2Aes5aoNVsU6iWThc']).then(data => console.log(data))\n   * // Get only one album\n   * easySpotifyInstance.getAlbums('2noRn2Aes5aoNVsU6iWThc').then(data => console.log(data))\n   * @param {(string|string[])} ids A list of ids or only one id of albums to get data from, ex: \n   */\n  getAlbums(ids) {\n    return this.request(`${this.config.api}/albums?ids=${ids}`)\n  }\n\n  /**\n   * Get the tracks of an album\n   * @example\n   * // Get the tracks of TRON: Legacy Reconfigured album\n   * easySpotifyInstance.getAlbumTracks('382ObEPsp2rxGrnsizN5TX').then(data => console.log(data))\n   * @param {string} id The id of the album to get tracks of\n   */\n  getAlbumTracks(id) {\n    return this.request(`${this.config.api}/albums/${id}/tracks`)\n  }\n\n  /**\n   * A generic search on spotify.\n   * @example\n   * // Search for artist Bruno Mars\n   * easySpotifyInstance.search('Bruno Mars', 'artist').then(data => console.log(data))\n   * @param {string} query Your query, could be an album name, a track, an artist...\n   * @param {string} type The item type you want to search, this can't be empty and should be either album, artist, playlist, or track\n   */\n  search(query, type) {\n    return this.request(`${API_URL}/search?q=${query}&type=${type}`)\n  }\n\n  /**\n   * Search for albums on spotify\n   * @example\n   * // Search for album Global Warming\n   * easySpotifyInstance.searchAlbums('Global Warming')\n   * @param {string} query Can be an album name, an artist name, whatever you want\n   */\n  searchAlbums(query) {\n    return this.search(query, 'album')\n  }\n\n  /**\n   * Search for artists on spotify\n   * @example\n   * // Search for an artist but using it's track name\n   * easySpotifyInstance.searchArtists('Talking to The Moon').then(data => console.log(data))\n   * @param {string} query Can be a track name, or anything you can use to find an artist\n   */\n  searchArtists(query) {\n    return this.search(query, 'artist')\n  }\n\n  /**\n   * Search for playlists on spotify\n   * @example\n   * // Search for a NCS Playlist\n   * easySpotifyInstance.searchPlaylists('NCS').then(data => console.log(data))\n   * @param {string} query Can be a playlist name, a track name or anything you want\n   */\n  searchPlaylists(query) {\n    return this.search(query, 'playlist')\n  }\n\n  /**\n   * Search for tracks on spotify\n   * @example\n   * // Search for track Never Let Me Go\n   * easySpotify.searchTracks('Never Let Me Go').then(data => console.log(data))\n   * @param {string} query Can be a track name, an artist name, or anything you want\n   */\n  searchTracks(query) {\n    return this.search(query, 'track')\n  }\n}\n","export const toJSON = data => data.json()"],"sourceRoot":""}